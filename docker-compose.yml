services:
  # PostgreSQL Database
  db:
    image: postgres:15
    container_name: vk-postgres-${USER:-default}
    environment:
      POSTGRES_DB: vk
      POSTGRES_USER: vk
      POSTGRES_PASSWORD: vk
    ports:
      - "5432:5432"
    volumes:
      - vk-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 20
    networks:
      - visitkorea-network

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    container_name: vk-backend-${USER:-default}
    restart: unless-stopped
    env_file:
      - ./apps/backend/.env
    environment:
      # db 서비스 네임을 호스트로 사용
      DATABASE_URL: postgresql://${POSTGRES_USER:-vk}:${POSTGRES_PASSWORD:-vk}@db:5432/${POSTGRES_DB:-vk}?schema=public
      NODE_ENV: development
      PORT: ${PORT:-3002}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "3002:3002"
    # 개발 모드: 코드 핫리로드용 바인드 마운트
    volumes:
      - ./apps/backend:/app
      - /app/node_modules
      - ./packages/db/prisma/schema.prisma:/app/schema.prisma
      - ./packages/db/prisma/schema.prisma:/app/prisma/schema.prisma
    command: npm run dev
    working_dir: /app
    networks:
      - visitkorea-network

  # Prisma Studio (개발용)
  prisma-studio:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    container_name: vk-prisma-studio-${USER:-default}
    restart: unless-stopped
    env_file:
      - ./apps/backend/.env
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-vk}:${POSTGRES_PASSWORD:-vk}@db:5432/${POSTGRES_DB:-vk}?schema=public
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "5555:5555"
    command: npx prisma studio --hostname 0.0.0.0
    networks:
      - visitkorea-network
    profiles:
      - dev  # 개발 시에만 실행

volumes:
  vk-postgres-data:

networks:
  visitkorea-network:
    driver: bridge